{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Let\\xEDcia\\\\Documents\\\\r2t\\\\src\\\\ui\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport Container from '@mui/material/Container';\nimport { UploadZone } from './components/UploadZone';\nimport { ThemeCard } from './components/ThemeCard';\nimport './styles/dropzone.css';\nimport { createContext, useState } from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const InfoContext = /*#__PURE__*/createContext(); // Certifique-se de criar o contexto\n\nexport default function App() {\n  _s();\n  const [info, setInfo] = useState([]); // Declarar o estado `info` e `setInfo` corretamente\n\n  const setOrderedInfo = data => {\n    // Verifica se os dados são um array e se possuem conteúdo antes de tentar processá-los\n    if (Array.isArray(data) && data.length > 0) {\n      // Transformar os dados CSV em objetos utilizáveis, assumindo que a primeira linha é o cabeçalho\n      const transformedInfo = data.slice(1).map((row, index) => ({\n        id: index + 1,\n        content: row[0],\n        // Supondo que o conteúdo esteja na primeira coluna\n        likeliness: parseFloat(row[1]) // Supondo que a probabilidade esteja na segunda coluna\n      }));\n\n      // Ordenar os dados transformados\n      const orderedInfo = transformedInfo.sort((a, b) => b.likeliness - a.likeliness);\n      setInfo(orderedInfo); // Usar `setInfo` que é declarado no estado\n    } else {\n      console.error('Dados recebidos não são válidos:', data);\n      setInfo([]); // Reseta o estado se os dados não forem válidos\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(InfoContext.Provider, {\n    value: setOrderedInfo,\n    children: [\" \", /*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"static\",\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          component: \"div\",\n          sx: {\n            flexGrow: 1\n          },\n          children: \"FindTema\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      sx: {\n        p: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(UploadZone, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"hr\", {\n        style: {\n          border: '1px solid #ddd',\n          margin: '2rem 0 4rem 0'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '32px'\n        },\n        children: info.length > 0 ? info.map(item => /*#__PURE__*/_jsxDEV(ThemeCard, {\n          themeId: item.id,\n          text: item.content,\n          likeliness: item.likeliness\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this)) : 'No themes to display.'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"l80jYxdl7J+jIlUBq0OVxeu4AEE=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Container","UploadZone","ThemeCard","createContext","useState","AppBar","Toolbar","Typography","jsxDEV","_jsxDEV","InfoContext","App","_s","info","setInfo","setOrderedInfo","data","Array","isArray","length","transformedInfo","slice","map","row","index","id","content","likeliness","parseFloat","orderedInfo","sort","a","b","console","error","Provider","value","children","position","variant","component","sx","flexGrow","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","p","style","border","margin","marginTop","item","themeId","text","_c","$RefreshReg$"],"sources":["C:/Users/Letícia/Documents/r2t/src/ui/src/App.jsx"],"sourcesContent":["import Container from '@mui/material/Container';\nimport { UploadZone } from './components/UploadZone';\nimport { ThemeCard } from './components/ThemeCard';\nimport './styles/dropzone.css';\nimport { createContext, useState } from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\n\nexport const InfoContext = createContext(); // Certifique-se de criar o contexto\n\nexport default function App() {\n    const [info, setInfo] = useState([]); // Declarar o estado `info` e `setInfo` corretamente\n\n    const setOrderedInfo = (data) => { \n        // Verifica se os dados são um array e se possuem conteúdo antes de tentar processá-los\n        if (Array.isArray(data) && data.length > 0) {\n            // Transformar os dados CSV em objetos utilizáveis, assumindo que a primeira linha é o cabeçalho\n            const transformedInfo = data.slice(1).map((row, index) => ({\n                id: index + 1,\n                content: row[0],  // Supondo que o conteúdo esteja na primeira coluna\n                likeliness: parseFloat(row[1])  // Supondo que a probabilidade esteja na segunda coluna\n            }));\n\n            // Ordenar os dados transformados\n            const orderedInfo = transformedInfo.sort((a, b) => b.likeliness - a.likeliness);\n            setInfo(orderedInfo); // Usar `setInfo` que é declarado no estado\n        } else {\n            console.error('Dados recebidos não são válidos:', data);\n            setInfo([]); // Reseta o estado se os dados não forem válidos\n        }\n    };\n\n    return (\n        <InfoContext.Provider value={setOrderedInfo}> {/* Prover `setOrderedInfo` no contexto */}\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n                        FindTema\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n\n            <Container maxWidth=\"lg\" sx={{ p: 5 }}>\n                <UploadZone/> {/* `UploadZone` agora usará o contexto para acessar `setOrderedInfo` */}\n\n                <hr style={{ border: '1px solid #ddd', margin: '2rem 0 4rem 0' }}/>\n\n                <div style={{ marginTop: '32px' }}>\n                    {info.length > 0\n                    ? info.map((item) => (\n                        <ThemeCard \n                            key={item.id} \n                            themeId={item.id} \n                            text={item.content} \n                            likeliness={item.likeliness} \n                        />\n                    ))\n                    : 'No themes to display.'}\n                </div>\n            </Container>\n        </InfoContext.Provider>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}