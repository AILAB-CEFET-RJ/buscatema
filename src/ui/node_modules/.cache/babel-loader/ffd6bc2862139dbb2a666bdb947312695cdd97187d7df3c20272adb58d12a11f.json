{"ast":null,"code":"const setOrderedInfo = data => {\n  // Verifica se os dados são um array e se possuem conteúdo antes de tentar processá-los\n  if (Array.isArray(data) && data.length > 0) {\n    // Transformar os dados CSV em objetos utilizáveis, assumindo que a primeira linha é o cabeçalho\n    const transformedInfo = data.slice(1).map((row, index) => ({\n      id: index + 1,\n      content: row[0],\n      // Supondo que o conteúdo esteja na primeira coluna\n      likeliness: parseFloat(row[1]) // Supondo que a probabilidade esteja na segunda coluna\n    }));\n\n    // Ordenar os dados transformados\n    const orderedInfo = transformedInfo.sort((a, b) => b.likeliness - a.likeliness);\n    setInfo(orderedInfo);\n  } else {\n    console.error('Dados recebidos não são válidos:', data);\n    setInfo([]); // Reseta o estado se os dados não forem válidos\n  }\n};","map":{"version":3,"names":["setOrderedInfo","data","Array","isArray","length","transformedInfo","slice","map","row","index","id","content","likeliness","parseFloat","orderedInfo","sort","a","b","setInfo","console","error"],"sources":["C:/Users/Letícia/Documents/r2t/src/ui/src/App.jsx"],"sourcesContent":["const setOrderedInfo = (data) => { \n    // Verifica se os dados são um array e se possuem conteúdo antes de tentar processá-los\n    if (Array.isArray(data) && data.length > 0) {\n        // Transformar os dados CSV em objetos utilizáveis, assumindo que a primeira linha é o cabeçalho\n        const transformedInfo = data.slice(1).map((row, index) => ({\n            id: index + 1,\n            content: row[0],  // Supondo que o conteúdo esteja na primeira coluna\n            likeliness: parseFloat(row[1])  // Supondo que a probabilidade esteja na segunda coluna\n        }));\n\n        // Ordenar os dados transformados\n        const orderedInfo = transformedInfo.sort((a, b) => b.likeliness - a.likeliness);\n        setInfo(orderedInfo);\n    } else {\n        console.error('Dados recebidos não são válidos:', data);\n        setInfo([]); // Reseta o estado se os dados não forem válidos\n    }\n};\n"],"mappings":"AAAA,MAAMA,cAAc,GAAIC,IAAI,IAAK;EAC7B;EACA,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,IAAIA,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE;IACxC;IACA,MAAMC,eAAe,GAAGJ,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,MAAM;MACvDC,EAAE,EAAED,KAAK,GAAG,CAAC;MACbE,OAAO,EAAEH,GAAG,CAAC,CAAC,CAAC;MAAG;MAClBI,UAAU,EAAEC,UAAU,CAACL,GAAG,CAAC,CAAC,CAAC,CAAC,CAAE;IACpC,CAAC,CAAC,CAAC;;IAEH;IACA,MAAMM,WAAW,GAAGT,eAAe,CAACU,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACL,UAAU,GAAGI,CAAC,CAACJ,UAAU,CAAC;IAC/EM,OAAO,CAACJ,WAAW,CAAC;EACxB,CAAC,MAAM;IACHK,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEnB,IAAI,CAAC;IACvDiB,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;EACjB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}