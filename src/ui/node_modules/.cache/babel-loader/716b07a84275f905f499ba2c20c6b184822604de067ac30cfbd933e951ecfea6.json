{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Let\\xEDcia\\\\Documents\\\\r2t\\\\src\\\\ui\\\\src\\\\components\\\\UploadZone.jsx\",\n  _s = $RefreshSig$();\nimport Button from '@mui/material/Button';\nimport { DropZone } from './DropZone';\nimport { useContext, useState } from 'react';\nimport { InfoContext } from '../App';\nimport '../styles/uploadzone.css';\nimport { CsvViewer } from './CsvViewer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function UploadZone() {\n  _s();\n  const [files, setFiles] = useState({\n    pdf: '',\n    csv: ''\n  });\n  const [csvData, setCsvData] = useState([]); // Novo estado para armazenar dados CSV\n\n  const setInfo = useContext(InfoContext);\n  const filesUploaded = Object.values(files).reduce((prev, curr) => {\n    return prev + (curr instanceof File ? 1 : 0);\n  }, 0);\n  const sendFiles = async () => {\n    const formData = new FormData();\n    formData.append('pdf', files.pdf);\n    formData.append('csv', files.csv);\n    const res = await fetch(`http://localhost:5000/upload`, {\n      method: 'POST',\n      body: formData\n    });\n    if (res.ok) {\n      const result = await res.json();\n      setInfo(result);\n\n      // Se for um arquivo CSV, processe e armazene os dados\n      if (files.csv) {\n        const reader = new FileReader();\n        reader.onload = e => {\n          const text = e.target.result;\n          const rows = text.split('\\n').map(row => row.split(','));\n          setCsvData(rows);\n        };\n        reader.readAsText(files.csv);\n      }\n    } else {\n      setInfo([]);\n    }\n    setFiles({\n      pdf: '',\n      csv: ''\n    });\n  };\n  const button = filesUploaded >= 2 ? /*#__PURE__*/_jsxDEV(Button, {\n    variant: \"contained\",\n    onClick: sendFiles,\n    children: \"Enviar\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Button, {\n    variant: \"contained\",\n    disabled: true,\n    children: [\"Arquivos inseridos (\", filesUploaded, \" de 2)\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"uploadzone\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"uploadzone__dropzones\",\n      children: [/*#__PURE__*/_jsxDEV(DropZone, {\n        files: files,\n        setFiles: setFiles,\n        acceptType: {\n          'application/pdf': ['.pdf']\n        },\n        fileType: 'pdf'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DropZone, {\n        files: files,\n        setFiles: setFiles,\n        acceptType: {\n          'text/csv': ['.csv']\n        },\n        fileType: 'csv'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), button, csvData.length > 0 && /*#__PURE__*/_jsxDEV(CsvViewer, {\n      data: csvData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadZone, \"xOhgPIlS3HkRcHhvsD6unfaBsZ0=\");\n_c = UploadZone;\nvar _c;\n$RefreshReg$(_c, \"UploadZone\");","map":{"version":3,"names":["Button","DropZone","useContext","useState","InfoContext","CsvViewer","jsxDEV","_jsxDEV","UploadZone","_s","files","setFiles","pdf","csv","csvData","setCsvData","setInfo","filesUploaded","Object","values","reduce","prev","curr","File","sendFiles","formData","FormData","append","res","fetch","method","body","ok","result","json","reader","FileReader","onload","e","text","target","rows","split","map","row","readAsText","button","variant","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","disabled","className","acceptType","fileType","length","data","_c","$RefreshReg$"],"sources":["C:/Users/LetÃ­cia/Documents/r2t/src/ui/src/components/UploadZone.jsx"],"sourcesContent":["\nimport Button from '@mui/material/Button';\nimport { DropZone } from './DropZone';\nimport { useContext, useState } from 'react';\nimport { InfoContext } from '../App';\nimport '../styles/uploadzone.css';\nimport { CsvViewer } from './CsvViewer';\n\nexport function UploadZone() {\n    const [files, setFiles] = useState({\n        pdf: '',\n        csv: ''\n    })\n    const [csvData, setCsvData] = useState([]); // Novo estado para armazenar dados CSV\n\n    const setInfo = useContext(InfoContext)\n\n    const filesUploaded = Object.values(files).reduce((prev, curr) => {\n        return prev + (curr instanceof File ? 1 : 0)\n    }, 0)\n\n    const sendFiles = async () => {\n        const formData = new FormData()\n        formData.append('pdf', files.pdf)\n        formData.append('csv', files.csv)\n\n        const res = await fetch(`http://localhost:5000/upload`, {\n            method: 'POST',\n            body: formData\n        })\n        \n        if (res.ok) {\n            const result = await res.json();\n            setInfo(result);\n\n            // Se for um arquivo CSV, processe e armazene os dados\n            if (files.csv) {\n                const reader = new FileReader();\n                reader.onload = (e) => {\n                    const text = e.target.result;\n                    const rows = text.split('\\n').map(row => row.split(','));\n                    setCsvData(rows);\n                };\n                reader.readAsText(files.csv);\n            }\n        } else {\n            setInfo([]);\n        }\n        setFiles({ pdf: '', csv: '' })\n    }\n\n    const button = filesUploaded >=2 ? \n    <Button variant=\"contained\" onClick={sendFiles}>\n        Enviar\n    </Button> :\n    <Button variant=\"contained\" disabled>\n        Arquivos inseridos ({filesUploaded} de 2)\n    </Button>\n\n    return (\n    <div className='uploadzone'>\n        <div className=\"uploadzone__dropzones\">\n            <DropZone files={files} setFiles={setFiles} acceptType={{'application/pdf': ['.pdf']}} fileType={'pdf'}/>\n            <DropZone files={files} setFiles={setFiles} acceptType={{'text/csv': ['.csv']}} fileType={'csv'}/>\n        </div>\n\n        {button}\n        \n        {/* Adicione o componente CsvViewer aqui */}\n        {csvData.length > 0 && <CsvViewer data={csvData} />}\n    </div>\n    ) \n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}