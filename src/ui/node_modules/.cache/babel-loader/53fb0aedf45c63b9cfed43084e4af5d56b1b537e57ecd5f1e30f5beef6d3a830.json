{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Let\\xEDcia\\\\Documents\\\\r2t\\\\src\\\\ui\\\\src\\\\components\\\\UploadZone.jsx\",\n  _s = $RefreshSig$();\nimport Button from '@mui/material/Button';\nimport { DropZone } from './DropZone';\nimport { useContext, useState } from 'react';\nimport { InfoContext } from '../App';\nimport '../styles/uploadzone.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function UploadZone() {\n  _s();\n  const [files, setFiles] = useState({\n    csv1: '',\n    csv2: ''\n  });\n  const setOrderedInfo = useContext(InfoContext);\n  const [loading, setLoading] = useState(false);\n  const filesUploaded = Object.values(files).reduce((prev, curr) => {\n    return prev + (curr instanceof File ? 1 : 0);\n  }, 0);\n  const fetchCSV = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/get-result');\n      if (response.ok) {\n        const csvText = await response.text();\n        const csvData = csvText.trim().split('\\n').map(row => row.split(','));\n\n        // Processa os dados CSV para o formato esperado\n        const formattedData = csvData.map((row, index) => ({\n          id: index + 1,\n          // ou outra lógica para o ID\n          content: row[0],\n          // ajuste conforme o conteúdo do CSV\n          likeliness: parseFloat(row[1]) // ajuste conforme o conteúdo do CSV\n        }));\n        setOrderedInfo(formattedData); // Usando a função para processar e definir as informações\n      } else {\n        console.error('Falha ao buscar o arquivo CSV.');\n      }\n    } catch (error) {\n      console.error('Erro ao buscar o arquivo CSV:', error);\n    }\n  };\n  const sendFiles = async () => {\n    setLoading(true);\n    const formData = new FormData();\n    formData.append('csv1', files.csv1);\n    formData.append('csv2', files.csv2);\n    try {\n      const res = await fetch(`http://localhost:5000/upload`, {\n        method: 'POST',\n        body: formData\n      });\n      if (res.ok) {\n        console.log('Arquivos enviados com sucesso.');\n\n        // Aguardar 40 segundos antes de buscar o CSV\n        setTimeout(fetchCSV, 40000);\n      } else {\n        console.error('Erro ao enviar os arquivos:', res.statusText);\n      }\n    } catch (error) {\n      console.error('Erro ao enviar os arquivos:', error);\n    } finally {\n      setLoading(false);\n      setFiles({\n        csv1: '',\n        csv2: ''\n      });\n    }\n  };\n  const button = filesUploaded >= 2 ? /*#__PURE__*/_jsxDEV(Button, {\n    variant: \"contained\",\n    onClick: sendFiles,\n    disabled: loading,\n    children: loading ? 'Aguardando 40 segundos...' : 'Enviar'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(Button, {\n    variant: \"contained\",\n    disabled: true,\n    children: [\"Arquivos inseridos (\", filesUploaded, \" de 2)\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"uploadzone\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"uploadzone__dropzones\",\n      children: [/*#__PURE__*/_jsxDEV(DropZone, {\n        files: files,\n        setFiles: setFiles,\n        acceptType: {\n          'text/csv': ['.csv']\n        },\n        fileType: 'csv1'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DropZone, {\n        files: files,\n        setFiles: setFiles,\n        acceptType: {\n          'text/csv': ['.csv']\n        },\n        fileType: 'csv2'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), button]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n_s(UploadZone, \"jS1u3EPzBycsVHZz4ApodnEYVX0=\");\n_c = UploadZone;\nvar _c;\n$RefreshReg$(_c, \"UploadZone\");","map":{"version":3,"names":["Button","DropZone","useContext","useState","InfoContext","jsxDEV","_jsxDEV","UploadZone","_s","files","setFiles","csv1","csv2","setOrderedInfo","loading","setLoading","filesUploaded","Object","values","reduce","prev","curr","File","fetchCSV","response","fetch","ok","csvText","text","csvData","trim","split","map","row","formattedData","index","id","content","likeliness","parseFloat","console","error","sendFiles","formData","FormData","append","res","method","body","log","setTimeout","statusText","button","variant","onClick","disabled","children","fileName","_jsxFileName","lineNumber","columnNumber","className","acceptType","fileType","_c","$RefreshReg$"],"sources":["C:/Users/Letícia/Documents/r2t/src/ui/src/components/UploadZone.jsx"],"sourcesContent":["import Button from '@mui/material/Button';\nimport { DropZone } from './DropZone';\nimport { useContext, useState } from 'react';\nimport { InfoContext } from '../App';\nimport '../styles/uploadzone.css';\n\nexport function UploadZone() {\n    const [files, setFiles] = useState({\n        csv1: '',\n        csv2: ''\n    });\n\n    const setOrderedInfo = useContext(InfoContext);\n    const [loading, setLoading] = useState(false);\n\n    const filesUploaded = Object.values(files).reduce((prev, curr) => {\n        return prev + (curr instanceof File ? 1 : 0);\n    }, 0);\n\n    const fetchCSV = async () => {\n        try {\n            const response = await fetch('http://localhost:5000/get-result');\n            if (response.ok) {\n                const csvText = await response.text();\n                const csvData = csvText.trim().split('\\n').map(row => row.split(','));\n                \n                // Processa os dados CSV para o formato esperado\n                const formattedData = csvData.map((row, index) => ({\n                    id: index + 1, // ou outra lógica para o ID\n                    content: row[0], // ajuste conforme o conteúdo do CSV\n                    likeliness: parseFloat(row[1]) // ajuste conforme o conteúdo do CSV\n                }));\n\n                setOrderedInfo(formattedData); // Usando a função para processar e definir as informações\n            } else {\n                console.error('Falha ao buscar o arquivo CSV.');\n            }\n        } catch (error) {\n            console.error('Erro ao buscar o arquivo CSV:', error);\n        }\n    };\n\n    const sendFiles = async () => {\n        setLoading(true);\n        const formData = new FormData();\n        formData.append('csv1', files.csv1);\n        formData.append('csv2', files.csv2);\n\n        try {\n            const res = await fetch(`http://localhost:5000/upload`, {\n                method: 'POST',\n                body: formData\n            });\n\n            if (res.ok) {\n                console.log('Arquivos enviados com sucesso.');\n\n                // Aguardar 40 segundos antes de buscar o CSV\n                setTimeout(fetchCSV, 40000);\n            } else {\n                console.error('Erro ao enviar os arquivos:', res.statusText);\n            }\n        } catch (error) {\n            console.error('Erro ao enviar os arquivos:', error);\n        } finally {\n            setLoading(false);\n            setFiles({ csv1: '', csv2: '' });\n        }\n    };\n\n    const button = filesUploaded >= 2 ? \n        <Button variant=\"contained\" onClick={sendFiles} disabled={loading}>\n            {loading ? 'Aguardando 40 segundos...' : 'Enviar'}\n        </Button> :\n        <Button variant=\"contained\" disabled>\n            Arquivos inseridos ({filesUploaded} de 2)\n        </Button>;\n\n    return (\n        <div className='uploadzone'>\n            <div className=\"uploadzone__dropzones\">\n                <DropZone files={files} setFiles={setFiles} acceptType={{'text/csv': ['.csv']}} fileType={'csv1'}/>\n                <DropZone files={files} setFiles={setFiles} acceptType={{'text/csv': ['.csv']}} fileType={'csv2'}/>\n            </div>\n\n            {button}\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}